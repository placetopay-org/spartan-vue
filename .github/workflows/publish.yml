name: 'publish'
on:
    workflow_dispatch:
        inputs:
            release-type:
                description: 'PRE Release type (one of): patch, minor, major, prepatch, preminor, premajor, prerelease'
                required: true
                default: 'prerelease'
jobs:
    release:
        name: build and publish
        runs-on: ubuntu-latest
        steps:
            - name: Set release type output
              id: release-type
              run: |
                  USER_INPUT=${{ github.event.inputs.release-type }}
                  echo "RELEASE_TYPE=${USER_INPUT:-"prerelease"}" >> $GITHUB_OUTPUT

            - name: checkout
              uses: actions/checkout@v2
              with:
                  fetch-depth: 0

            - name: Setup Node.js
              uses: actions/setup-node@v2
              with:
                  node-version: 16
                  registry-url: 'https://registry.npmjs.org'

            - name: Install dependencies
              run: npm ci && npm run test:pipe

            - name: SonarCloud Scan
              uses: sonarsource/sonarcloud-github-action@master
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

            - name: Git configuration
              run: |
                  git config --global user.email "${{ github.actor }}@users.noreply.github.com"
                  git config --global user.name "${{ github.actor }}"

            - name: Bump release version
              if: startsWith(steps.release-type.outputs.RELEASE_TYPE, 'pre') != true
              run: |
                  echo "NEW_VERSION=$(npm --no-git-tag-version version $RELEASE_TYPE)" >> $GITHUB_ENV
                  echo "RELEASE_TAG=latest" >> $GITHUB_ENV
              env:
                  RELEASE_TYPE: ${{ steps.release-type.outputs.RELEASE_TYPE }}

            - name: Bump pre-release version
              if: startsWith(steps.release-type.outputs.RELEASE_TYPE, 'pre')
              run: |
                  echo "NEW_VERSION=$(npm --no-git-tag-version --preid=beta version $RELEASE_TYPE)" >> $GITHUB_ENV
                  echo "RELEASE_TAG=beta" >> $GITHUB_ENV
              env:
                  RELEASE_TYPE: ${{ steps.release-type.outputs.RELEASE_TYPE }}

            # Update changelog unreleased section with new version
            - name: Update changelog
              uses: superfaceai/release-changelog-action@v1
              with:
                  path-to-changelog: CHANGELOG.md
                  version: ${{ env.NEW_VERSION }}
                  operation: release

            - name: Commit package.json changes and create tag
              run: |
                  git add "package.json"
                  git add "package-lock.json"
                  git add "CHANGELOG.md"
                  git commit -m "feat: release ${{ env.NEW_VERSION }}"
                  git tag ${{ env.NEW_VERSION }}

            - name: Build compiled files
              run: npm run build

            - name: Publish
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.NPM_ACCESS_TOKEN_PLACETOPAY_DEV }}
              run: npm publish --tag=${{ env.RELEASE_TAG }} --access=public

            - name: Push changes to repository
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  git push origin && git push --tags

            - name: Get version changelog
              id: get-changelog
              uses: superfaceai/release-changelog-action@v1
              with:
                  path-to-changelog: CHANGELOG.md
                  version: ${{ env.NEW_VERSION }}
                  operation: read

            # Update GitHub release with changelog
            - name: Update GitHub release documentation
              uses: softprops/action-gh-release@v1
              with:
                  tag_name: ${{ env.NEW_VERSION }}
                  body: ${{ steps.get-changelog.outputs.changelog }}
                  prerelease: ${{ startsWith(steps.release-type.outputs.RELEASE_TYPE, 'pre') }}
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
